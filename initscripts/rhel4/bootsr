#! /bin/sh
#****h* comoonics-bootimage/bootsr
#  NAME
#    bootsr
#    $Id: bootsr,v 1.6 2009-02-25 14:24:59 marc Exp $
#  DESCRIPTION
#    Comoonics Shared Root post boot settings
#  AUTHOR
#    Mark Hlawatschek
#
#*******
#
# chkconfig: 345 11 99
# description: do the post settings for Comoonics Shared Root
# Author: hlawatschek@atix.de
#
#

#
# /etc/rc.d/init.d/bootsr
#

CCSD_OPTS=

. /etc/init.d/functions

BOOTIMAGE_PATH=/opt/atix/comoonics-bootimage
CCSD_LOCK_FILE="/var/lock/subsys/ccsd-chroot"
DEFAULT_LOCK_COUNT=50000
CHROOT_PATH=$(/opt/atix/comoonics-bootimage/manage_chroot.sh -p) 
UPDATE_CHROOT="${BOOTIMAGE_PATH}/manage_chroot.sh -a update"
UMOUNT_CHROOT="${BOOTIMAGE_PATH}/manage_chroot.sh -a umount"
MOUNT_CHROOT="${BOOTIMAGE_PATH}/manage_chroot.sh -a mount"
MOUNT_CDSL="${BOOTIMAGE_PATH}/manage_chroot.sh -a mount_cdsl"
CLEAN_START="${BOOTIMAGE_PATH}/manage_chroot.sh -a clean"
BUILD_FILE="/etc/comoonics-build.txt"

RETVAL=0
. ${BOOTIMAGE_PATH}/boot-scripts/etc/std-lib.sh
sourceLibs ${BOOTIMAGE_PATH}/boot-scripts
sourceRootfsLibs ${BOOTIMAGE_PATH}/boot-scripts


#****f* bootsr/check_mtab
#  NAME
#    check_mtab
#  SYNOPSIS
#    function check_mtab rootfstype
#  IDEAS
#    Checks if the mtab is a file (not a link) and if so checks if all filesystems mounted within the initrd are also in the mtab
function check_mtab {
	local rootfs_type=$1
	
	if [ -f /etc/mtab ]; then
		cat /proc/mounts | cut -d" " -f2 | grep /cdsl.local >/dev/null &>/dev/null
		if [ $? -eq 0 ]; then
			cat /etc/mtab | cut -d" " -f2 | grep /cdsl.local >/dev/null &>/dev/null
			if [ $? -ne 0 ]; then
				$MOUNT_CDSL
			fi
		fi
	fi
} 

#****f* bootsr/clean_start
#  NAME
#    clean_start
#  SYNOPSIS
#    function clean_start
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function clean_start {
	$CLEAN_START
}
#************ clean_start

#****f* bootsr/check_sharedroot
#  NAME
#    check_sharedroot
#  SYNOPSIS
#    function check_sharedroot
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function check_sharedroot {
  root_fstype=$(mount | grep "/ " | awk 'BEGIN { exit_c=1; } { if ($5) { print $5; exit_c=0; } } END{ exit exit_c}')
  if [ "$root_fstype" = "gfs" ]; then
    return 1
  else
    return 0
  fi
}
#************ check_sharedroot
#****f* bootsr/get_runlevel
#  NAME
#    get_runlevel
#  SYNOPSIS
#    function get_runlevel
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function get_runlevel {
  return $(runlevel | cut -d" " -f2)
}
#************ get_runlevel

#************ umount_chroot
#****f* bootsr/umount_chroot
#  NAME
#    umount_chroot
#  SYNOPSIS
#    function umount_chroot
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function umount_chroot {
  return $(runlevel | cut -d" " -f2)
}
#************ get_runlevel

#****f* bootsr/get_lockcount
#  NAME
#    get_getlockcount
#  SYNOPSIS
#    function get_lockcount default_lockcount
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function get_lockcount {
  DEF_LOCK_COUNT=$1
  MAX_LCOK_COUNT=$2
  [ -z "$DEF_LOCK_COUNT" ] && DEF_LOCK_COUNT=${DEFAULT_LOCK_COUNT}
  [ -z "$DEF_LOCK_COUNT" ] && DEF_LOCK_COUNT=50000
  [ -z "$MAX_LOCK_COUNT" ] && MAX_LOCK_COUNT=0
  cat /proc/meminfo | grep MemTotal | awk -v maxlockcount=$MAX_LOCK_COUNT -v deflockcount=$DEF_LOCK_COUNT '
  {
  	lockcount=int($2/1024/512*deflockcount);
  	if ((lockcount > maxlockcount) && (maxlockcount > 0))
  	  lockcount=maxlockcount;
  	print lockcount;
  }
'
}
#************ get_lockcount


#****f* bootsr/main
#  NAME
#    main
#  SYNOPSIS
#    function main
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
logfile=/var/log/bootsr.log

#to be backward compatible
exec 3>> $logfile
exec 4>> $logfile
exec 5>> $logfile
exec 6>> $logfile
exec 7>> $logfile

rootfs=$(repository_get_value rootfs)
clutype=$(repository_get_value clutype)

# See how we were called.
case "$1" in
  start)
  	# will do
  	# - activate all lvm devices (na)
  	# - activate swap partitions (currently disabled)
  	# - mount everything except nfs (na)
  	# - adjust dlm lock_count
  	# - update chroot environment for additional services (fence_ack_server)

    if [ check_sharedroot ]; then
      
#      runlevel=$(get_runlevel)
      echo  "Doing the Comoonics Shared Root post settings "
      touch /var/lock/subsys/bootsr
      mkdir -p /var/run/cluster
      for file in ccsd.pid ccsd.sock; do
            ln -s $(/opt/atix/comoonics-bootimage/manage_chroot.sh -p)/var/run/cluster/$file /var/run/cluster
      done
      
#      echo `date` Doing the Comoonics Shared Root post settings | tee -a /var/log/bootsr | logger -t com-bootsr
#      /sbin/lvm vgscan --ignorelockingfailure --mknodes 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
#      /sbin/lvm vgchange --ignorelockingfailure -ay 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
#      sleep 1
#      /sbin/swapon -av 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
      /bin/mount -at gfs 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
      count=$(get_lockcount ${DEFAULT_LOCK_COUNT} ${MAX_LOCK_COUNT})
	  action "Changing dlm:drop_count to $count" "sh -c \"echo $count > /proc/cluster/lock_dlm/drop_count\""
#      echo $count > /proc/cluster/lock_dlm/drop_count && echo -n "($count)" &&
#      success || failure
#      echo

      # Start ccsd-chroot if it will not be started from init in Runlevel 3
      # FIXME: There will be propably be no $FENCE_CHROOT this time.
#      chkconfig --list ccsd-chroot | grep "3:on" >/dev/null 2>/dev/null
#      if [ $? -eq 1 ] && [ ! -e /var/run/cluster/ccsd.pid ]; then
#         /etc/init.d/ccsd-chroot start
#      fi
	  # Update chroot environment with files from /etc/comoonics/bootimage-chroot
	  action "Updating chroot environment" $UPDATE_CHROOT
 	  action "Mounting filesystems to chroot" $MOUNT_CHROOT
 	  
    fi
    ;;
  stop)
  	  [ -e /var/lock/subsys/bootsr ] && rm -f /var/lock/subsys/bootsr 
	  action "Cleaning up chroot environment" $UMOUNT_CHROOT
        ;;
  status)
      exit 0
      ;;
  restart|reload)
      if [ check_sharedroot ]; then
	    action "Updating chroot environment" $UPDATE_CHROOT
	  fi
      ;;
  *)
      echo "Usage: bootsr {start|stop|status|restart|reload}"
      exit 1
esac
exit $RETVAL
#************ main
###############
# $Log: bootsr,v $
# Revision 1.6  2009-02-25 14:24:59  marc
# backport of new features to rhel4
#
# Revision 1.5  2008/10/29 14:45:33  mark
# fix for bug #251 from EL4_4
#
# Revision 1.3.2.1  2008/09/09 15:15:08  mark
# fix for bug #251
#
# Revision 1.3  2007/11/22 16:31:04  mark
# added automatic mount for gfs filesystems, fixes bz #150
#
# Revision 1.2  2007/10/11 08:46:43  mark
# fix reload option #106
#
# Revision 1.1  2007/09/12 14:45:41  mark
# extra initrd directory
# initscripts are distro dependent

