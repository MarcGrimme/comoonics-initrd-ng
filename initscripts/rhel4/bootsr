#! /bin/sh
#****h* comoonics-bootimage/bootsr
#  NAME
#    bootsr
#    $Id: bootsr,v 1.1 2007-09-12 14:45:41 mark Exp $
#  DESCRIPTION
#    Comoonics Shared Root post boot settings
#  AUTHOR
#    Mark Hlawatschek
#
#*******
#
# chkconfig: 345 11 99
# description: do the post settings for Comoonics Shared Root
# Author: hlawatschek@atix.de
#
#

#
# /etc/rc.d/init.d/bootsr
#

CCSD_OPTS=

. /etc/init.d/functions

CCSD_LOCK_FILE="/var/lock/subsys/ccsd-chroot"
DEFAULT_LOCK_COUNT=50000
UPDATE_CHROOT="/opt/atix/comoonics-bootimage/manage_chroot.sh -a update"
UMOUNT_CHROOT="/opt/atix/comoonics-bootimage/manage_chroot.sh -a umount"
MOUNT_CHROOT="/opt/atix/comoonics-bootimage/manage_chroot.sh -a mount"
BUILD_FILE="/etc/comoonics-build.txt"

RETVAL=0
[ -f /etc/sysconfig/cluster ] && . /etc/sysconfig/cluster

#****f* bootsr/check_sharedroot
#  NAME
#    check_sharedroot
#  SYNOPSIS
#    function check_sharedroot
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function check_sharedroot {
  root_fstype=$(mount | grep "/ " | awk 'BEGIN { exit_c=1; } { if ($5) { print $5; exit_c=0; } } END{ exit exit_c}')
  if [ "$root_fstype" = "gfs" ]; then
    return 1
  else
    return 0
  fi
}
#************ check_sharedroot
#****f* bootsr/get_runlevel
#  NAME
#    get_runlevel
#  SYNOPSIS
#    function get_runlevel
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function get_runlevel {
  return $(runlevel | cut -d" " -f2)
}
#************ get_runlevel

#************ umount_chroot
#****f* bootsr/umount_chroot
#  NAME
#    umount_chroot
#  SYNOPSIS
#    function umount_chroot
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function umount_chroot {
  return $(runlevel | cut -d" " -f2)
}
#************ get_runlevel

#****f* bootsr/get_lockcount
#  NAME
#    get_getlockcount
#  SYNOPSIS
#    function get_lockcount default_lockcount
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function get_lockcount {
  DEF_LOCK_COUNT=$1
  MAX_LCOK_COUNT=$2
  [ -z "$DEF_LOCK_COUNT" ] && DEF_LOCK_COUNT=${DEFAULT_LOCK_COUNT}
  [ -z "$DEF_LOCK_COUNT" ] && DEF_LOCK_COUNT=50000
  [ -z "$MAX_LOCK_COUNT" ] && MAX_LOCK_COUNT=0
  cat /proc/meminfo | grep MemTotal | awk -v maxlockcount=$MAX_LOCK_COUNT -v deflockcount=$DEF_LOCK_COUNT '
  {
  	lockcount=int($2/1024/512*deflockcount);
  	if ((lockcount > maxlockcount) && (maxlockcount > 0))
  	  lockcount=maxlockcount;
  	print lockcount;
  }
'
}
#************ get_lockcount


#****f* bootsr/main
#  NAME
#    main
#  SYNOPSIS
#    function main
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#

# See how we were called.
case "$1" in
  start)
  	# will do
  	# - activate all lvm devices (na)
  	# - activate swap partitions (currently disabled)
  	# - mount everything except nfs (na)
  	# - adjust dlm lock_count
  	# - update chroot environment for additional services (fence_ack_server)

    if [ check_sharedroot ]; then
      
#      runlevel=$(get_runlevel)
      echo  "Doing the Comoonics Shared Root post settings "
      touch /var/lock/subsys/bootsr
#      echo `date` Doing the Comoonics Shared Root post settings | tee -a /var/log/bootsr | logger -t com-bootsr
#      /sbin/lvm vgscan --ignorelockingfailure --mknodes 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
#      /sbin/lvm vgchange --ignorelockingfailure -ay 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
#      sleep 1
#      /sbin/swapon -av 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
#      /bin/mount -at nonfs 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
      count=$(get_lockcount ${DEFAULT_LOCK_COUNT} ${MAX_LOCK_COUNT})
	  action "Changing dlm:drop_count to $count" "sh -c \"echo $count > /proc/cluster/lock_dlm/drop_count\""
#      echo $count > /proc/cluster/lock_dlm/drop_count && echo -n "($count)" &&
#      success || failure
#      echo

      # Start ccsd-chroot if it will not be started from init in Runlevel 3
      # FIXME: There will be propably be no $FENCE_CHROOT this time.
#      chkconfig --list ccsd-chroot | grep "3:on" >/dev/null 2>/dev/null
#      if [ $? -eq 1 ] && [ ! -e /var/run/cluster/ccsd.pid ]; then
#         /etc/init.d/ccsd-chroot start
#      fi
	  # Update chroot environment with files from /etc/comoonics/bootimage-chroot
	  action "Updating chroot environment" $UPDATE_CHROOT
 	  action "Mounting filesystems to chroot" $MOUNT_CHROOT
 	  
    fi
    ;;
  stop)
  	  [ -e /var/lock/subsys/bootsr ] && rm -f /var/lock/subsys/bootsr 
	  action "Cleaning up chroot environment" $UMOUNT_CHROOT
        ;;
  status)
      exit 0
      ;;
  restart|reload)
	  echo -n "Rebuilding fenced chroot"
	  prebuild_fenced_chroot $FENCE_CHROOT $FENCE_CHROOT_INITRD $FENCE_CHROOT_SOURCE $FENCE_CHROOT_ARCHIVE
      if [ $? -eq 0 ]; then
        create_builddate_file $FENCE_CHROOT/$BUILD_FILE
        success
      else
        failure
      fi
      echo
      exit $?
      ;;
  *)
        echo "Usage: bootsr {start|stop|status|restart|reload}"
        exit 1
esac
exit $RETVAL
#************ main
###############
# $Log: bootsr,v $
# Revision 1.1  2007-09-12 14:45:41  mark
# extra initrd directory
# initscripts are distro dependent
#
# Revision 1.12  2007/08/06 16:01:43  mark
# adapted to support bootimage 1.3
#
# Revision 1.11  2007/02/09 11:11:42  marc
# added definition for Builddatefile (obsolete???)
#
# Revision 1.10  2006/12/04 17:37:01  marc
# step enhanced
#
