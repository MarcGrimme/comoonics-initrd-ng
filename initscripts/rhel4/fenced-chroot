#!/bin/bash
#****h* comoonics-bootimage/fenced-chroot
#  NAME
#    fenced-chroot
#    $id$
#  DESCRIPTION
#    Initscript for stoping and starting fenced in chroot for
#    sharedroots
#*******
#
# chkconfig: 345 23 77
# description: Starts and stops fence domain
#
#
### BEGIN INIT INFO
# Provides:
### END INIT INFO

CHROOT_PATH=$(/opt/atix/comoonics-bootimage/manage_chroot.sh -p) 
CHROOT_START="/opt/atix/comoonics-bootimage/manage_chroot.sh -a start_service" 
CHROOT_STATUS_PID="/opt/atix/comoonics-bootimage/manage_chroot.sh -a status_service_pid" 
CHROOT_STOP_PID="/opt/atix/comoonics-bootimage/manage_chroot.sh -a stop_service_pid" 
FENCE_OPTS="-c -w"

. /etc/init.d/functions
[ -f /etc/sysconfig/cluster ] && . /etc/sysconfig/cluster

LOCK_FILE="/var/lock/subsys/fenced-chroot"

#****f* fenced-chroot/check_sharedroot
#  NAME
#    check_sharedroot
#  SYNOPSIS
#    function check_sharedroot {
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function check_sharedroot {
  root_fstype=$(mount | grep "/ " | awk 'BEGIN { exit_c=1; } { if ($5) { print $5; exit_c=0; } } END{ exit exit_c}')
  if [ "$root_fstype" = "gfs" ]; then
    return 1
  else
    return 0
  fi
}
#************ check_sharedroot
#****f* fenced-chroot/get_runlevel
#  NAME
#    get_runlevel
#  SYNOPSIS
#    function get_runlevel {
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function get_runlevel {
  return $(runlevel | cut -d" " -f2)
}

#************ get_runlevel
#****f* fenced-chroot/start
#  NAME
#    start
#  SYNOPSIS
#    start()
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
start()
{

  FENCE_OPTS="${FENCE_OPTS} $*"

  echo_local -N -n "Starting fence domain (chroot):"

  # If gulm is in ccs, don't start fenced
  if ! [ -r /etc/cluster/cluster.conf ]
    then
      failure "/etc/cluster/cluster.conf not readable."
      echo
      return 1
  elif grep -qE "<[[:space:]]*gulm([[:space:]]|[>]|$)" \
     /etc/cluster/cluster.conf
    then
      warning "Skipping because of <gulm> section detected in " \
              "/etc/cluster/cluster.conf"
      echo
      exit 0
  fi

  if $CHROOT_STATUS_PID /var/run/fenced.pid ; then
  	$CHROOT_STOP_PID /var/run/fenced.pid
  elif [ -e $CHROOT_PATH//var/run/fenced.pid ]; then
  	# make sure the pid file is removed
  	rm -f $CHROOT_PATH/var/run/fenced.pid >& /dev/null
  fi
  $CHROOT_START fenced $FENCE_OPTS
  rtrn=$?  

  if [ $rtrn -eq 0 ]
    then
      #> # make sure that the fence domain is up and running
      #> until grep "^Fence Domain:" /proc/cluster/services | grep -q " run "
      #> do
      #>      sleep 1;
      #> done
      success 
      echo
  else
      failure 
      echo
  fi

  # need the extra echo to properlly terminate the line
  return $rtrn
}

#************ start
#****f* fenced-chroot/stop
#  NAME
#    stop
#  SYNOPSIS
#    stop()
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
stop()
{
  echo_local -N -n "Stopping fence domain (chroot):"

  if pidof fenced &> /dev/null
    then
    $CHROOT_STOP_PID /var/run/fenced.pid
    rtrn=$?

    if [ $rtrn -eq 0 ]
      then
      success "shutdown"
      echo
    else
      failure "shutdown"
      echo
    fi
  else
    rtrn=0
    success "shutdown"
    echo
  fi
  rm -f ${CHROOT_PATH}/var/run/fenced.pid &> /dev/null
  # need the extra echo to properlly terminate the line
  return $rtrn
}
#************ stop

#****f* fenced-chroot/main
#  NAME
#    main
#  SYNOPSIS
#    main()
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
rtrn=1

# See how we were called.
case "$1" in
  start)
    if [ check_sharedroot ]; then
    	shift
        start $*
        rtrn=$?
        [ $rtrn = 0 ] && touch $LOCK_FILE
    fi
        ;;

  stop)
    if [ check_sharedroot ]; then
    	shift
        stop $*
        rtrn=$?
        [ $rtrn = 0 ] && rm -f $LOCK_FILE
    fi
        ;;

  restart)
        shift
        $0 stop $*
        $0 start $*
        rtrn=$?
        ;;

  status)
        status fenced
        rtrn=1
        ;;

  *)
        echo_local $"Usage: $0 {start|stop|restart|status}"
        ;;
esac

exit $rtrn
#************ main

#########################
# $Log: fenced-chroot,v $
# Revision 1.4  2010-08-06 13:35:06  marc
# - moved echo to echo_local in initscripts
#
# Revision 1.3  2010/02/16 10:06:39  marc
# typos
#
# Revision 1.2  2008/02/29 08:45:29  mark
# stop fenced befor start
# fix for bz 203.
#
# Revision 1.1  2007/09/12 14:45:41  mark
# extra initrd directory
# initscripts are distro dependent
#
# Revision 1.12  2007/08/06 16:01:43  mark
# adapted to support bootimage 1.3
#
# Revision 1.11  2006/10/06 08:37:18  marc
# added possibility to add params for fenced behind start/stop/restart
#
# Revision 1.10  2006/08/28 16:02:22  marc
# moved creation of chroot to bootsr
#
# Revision 1.9  2006/08/14 17:43:03  marc
# bugfixes with FENCE_CHROOT and FENCE_CHROOT_SOURCE
#
# Revision 1.8  2006/08/02 12:26:23  marc
# added support for fenced on a localfs
#
# Revision 1.7  2006/05/12 13:05:50  marc
# Major Bug fixed that leaded to fenced-chroot not working when booting up.
#
# Revision 1.6  2006/05/07 11:35:34  marc
# changed fence to fenced.
#
# Revision 1.5  2006/05/03 12:47:04  marc
# added documentation
#
# Revision 1.4  2006/04/13 18:47:04  marc
# changed fence_tool to fenced to not get errors joining in the fencedomain any more
#
# Revision 1.3  2006/02/16 13:58:33  marc
# minor changes
#
# Revision 1.2  2006/01/28 15:11:21  marc
# small changes
# added cvs tags
#
