#! /bin/sh
#****h* comoonics-bootimage/bootsr
#  NAME
#    bootsr
#    $id$
#  DESCRIPTION
#    Comoonics Shared Root post boot settings
#  AUTHOR
#    Mark Hlawatschek
#
#*******
#
# chkconfig: 345 11 99
# description: do the post settings for Comoonics Shared Root
# Author: hlawatschek@atix.de
#
#

#
# /etc/rc.d/init.d/bootsr
#

CCSD_OPTS=

. /etc/init.d/functions

CCSD_LOCK_FILE="/var/lock/subsys/ccsd"
DEFAULT_LOCK_COUNT=50000
FENCE_CHROOT=/var/lib/fence_tool
FENCE_CHROOT_INITRD=/var/lib/fence_tool
MKSERVICE_FOR_INITRD="/opt/atix/comoonics-bootimage/mkservice_for_initrd.sh"

RETVAL=0
[ -f /etc/sysconfig/cluster ] && . /etc/sysconfig/cluster

#****f* bootsr/check_sharedroot
#  NAME
#    check_sharedroot
#  SYNOPSIS
#    function check_sharedroot
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function check_sharedroot {
  root_fstype=$(mount | grep "/ " | awk 'BEGIN { exit_c=1; } { if ($5) { print $5; exit_c=0; } } END{ exit exit_c}')
  if [ "$root_fstype" = "gfs" ]; then
    return 1
  else
    return 0
  fi
}
#************ check_sharedroot
#****f* bootsr/get_runlevel
#  NAME
#    get_runlevel
#  SYNOPSIS
#    function get_runlevel
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function get_runlevel {
  return $(runlevel | cut -d" " -f2)
}
#************ get_runlevel

#****f* bootsr/get_lockcount
#  NAME
#    get_getlockcount
#  SYNOPSIS
#    function get_lockcount default_lockcount
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function get_lockcount {
  DEF_LOCK_COUNT=$1
  MAX_LCOK_COUNT=$2
  [ -z "$DEF_LOCK_COUNT" ] && DEF_LOCK_COUNT=${DEFAULT_LOCK_COUNT}
  [ -z "$DEF_LOCK_COUNT" ] && DEF_LOCK_COUNT=50000
  [ -z "$MAX_LOCK_COUNT" ] && MAX_LOCK_COUNT=0
  cat /proc/meminfo | grep MemTotal | awk -v maxlockcount=$MAX_LOCK_COUNT -v deflockcount=$DEF_LOCK_COUNT '
  {
  	lockcount=int($2/1024/512*deflockcount);
  	if ((lockcount > maxlockcount) && (maxlockcount > 0))
  	  lockcount=maxlockcount;
  	print lockcount;
  }
'
}
#************ get_lockcount

#******f* bootsr/prebuild_fenced_chroot
#  NAME
#    prebuild_fenced_chroot
#  SYNOPSIS
#    prebuild_fenced_chroot FENCE_CHROOT FENCE_CHROOT_INITRD FENCE_CHROOT_SOURCE FENCE_CHROOT_ARCHIVE
#  SOURCE
#
function prebuild_fenced_chroot {
  local FENCE_CHROOT=$1
  local FENCE_CHROOT_INITRD=$2
  local FENCE_CHROOT_SOURCE=$3
  local FENCE_CHROOT_ARCHIVE=$4

  [ ! -d $FENCE_CHROOT ] && mkdir -p ${FENCE_CHROOT}
  mount | grep "${FENCE_CHROOT}" &>/dev/null || stat -f -c "%T" ${FENCE_CHROOT} | grep -v "^UNKNOWN" &>/dev/null
  if [ $? -ne 0 ] ; then
    mount -t tmpfs none $FENCE_CHROOT
  fi
#  if [ "${FENCE_CHROOT}" != "${FENCE_CHROOT_INITRD}" ]; then
#  	files1=$(find ${FENCE_CHROOT} -type f 2>/dev/null | wc -l)
#  	files2=$(find ${FENCE_CHROOT_INITRD} -type f 2>/dev/null | wc -l)
#  	if [ $files1 -lt $files2 ]; then
#  		copy=1
#  	fi
#  fi
#  if [ "${FENCE_CHROOT}" != "${FENCE_CHROOT_SOURCE}" ]; then
#  	files1=$(find ${FENCE_CHROOT} -type f 2>/dev/null | wc -l)
#  	files2=$(find ${FENCE_CHROOT_SOURCE} -type f 2>/dev/null | wc -l)
#  	if [ $files1 -lt $files2 ]; then
#  		copy=1
#  	fi
#  fi

#  if [ -n "$copy" ] && [ $copy -eq 1 ]; then
	if [ -d ${FENCE_CHROOT_SOURCE} ]; then
       ${MKSERVICE_FOR_INITRD} $FENCE_CHROOT /sbin/fenced nostart &>/dev/null
	elif [ -d ${FENCE_CHROOT_INITRD} ] && [ "${FENCE_CHROOT_INITRD}" != "${FENCE_CHROOT}" ]; then
       ${MKSERVICE_FOR_INITRD} $FENCE_CHROOT /sbin/fenced nostart &>/dev/null
	elif [ -z ${FENCE_CHROOT_TAR} ] && [ -e ${FENCE_CHROOT_ARCHIVE} ]; then
		pushd ${FENCE_CHROOT} &>/dev/null
		tar xvzf ${FENCE_CHROOT_ARCHIVE}
		popd &>/dev/null
    fi
#  fi
}
#************* prebuild_fenced_chroot

#****f* bootsr/main
#  NAME
#    main
#  SYNOPSIS
#    function main
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#

# See how we were called.
case "$1" in
  start)
    if [ check_sharedroot ]; then
      runlevel=$(get_runlevel)
      echo -n "Doing the Comoonics Shared Root post settings "
      echo `date` Doing the Comoonics Shared Root post settings | tee -a /var/log/bootsr | logger -t com-bootsr
      /sbin/lvm vgscan --ignorelockingfailure --mknodes 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
      /sbin/lvm vgchange --ignorelockingfailure -ay 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
      sleep 1
#      /sbin/swapon -av 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
      /bin/mount -at nonfs 2>&1 | tee -a /var/log/bootsr | logger -t com-bootsr
      count=$(get_lockcount ${DEFAULT_LOCK_COUNT} ${MAX_LOCK_COUNT})
      echo $count > /proc/cluster/lock_dlm/drop_count && echo -n "($count)" &&
      success || failure
      echo

      if [ -e /initrd/var/run/cluster/ccsd.pid ]; then
        echo -n "Stopping ccsd from initrd"
        kill $(cat  /initrd/var/run/cluster/ccsd.pid) &&
        rm -f /initrd/var/run/cluster/ccsd.pid
        if [ $? -eq 0 ]; then
          success
        else
          failure
        fi
        echo
      fi
      chkconfig --list ccsd | grep "3:on" >/dev/null 2>/dev/null
      if [ $? -eq 1 ] && [ ! -e /var/run/cluster/ccsd.pid ]; then
        echo -n "Starting ccsd"
        /sbin/ccsd $CCSD_OPTS
        if [ $? -eq 0 ]; then
          success
        else
          failure
        fi
        echo
      fi
	  echo -n "Prebuilding fenced chroot"
	  if [ -d ${FENCE_CHROOT} ]; then
	    mv ${FENCE_CHROOT} ${FENCE_CHROOT}.bak
      fi
	  prebuild_fenced_chroot $FENCE_CHROOT $FENCE_CHROOT_INITRD $FENCE_CHROOT_SOURCE $FENCE_CHROOT_ARCHIVE
      if [ $? -eq 0 ]; then
        success
      else
        failure
      fi
      echo
    fi
    ;;
  stop)
      chkconfig --list ccsd | grep "3:on" >/dev/null 2>/dev/null
      if [ $? -eq 1 ]; then
        echo -n "Stopping ccsd:"
        for sec in $(seq 1 10)
        do
          if pidof ccsd > /dev/null
            then
             # get the pid of ccsd from /var/run/cluster/ccsd.pid
             # and break if the file is not there
             [ -r /var/run/cluster/ccsd.pid ] || break
             pid=$(cat /var/run/cluster/ccsd.pid )
             kill $pid 2> /dev/null || break
             sleep 1
          else
             success "shutdown"
	         rm /var/run/cluster/ccsd.pid
             echo
             exit 0
          fi
        done
        failure "shutdown"
        echo
        exit 1
      fi
        ;;
  status)
      exit 0
      ;;
  restart|reload)
	  echo -n "Rebuilding fenced chroot"
	  prebuild_fenced_chroot $FENCE_CHROOT $FENCE_CHROOT_INITRD $FENCE_CHROOT_SOURCE $FENCE_CHROOT_ARCHIVE
      if [ $? -eq 0 ]; then
        success
      else
        failure
      fi
      echo
      exit $?
      ;;
  *)
        echo "Usage: sysstat {start|stop|status|restart|reload}"
        exit 1
esac
exit $RETVAL
#************ main
