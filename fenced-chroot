#!/bin/bash
#
# chkconfig: 345 23 77
# description: Starts and stops fence domain
#
#
### BEGIN INIT INFO
# Provides:
### END INIT INFO

INITRD_DIR=/initrd

. /etc/init.d/functions
[ -f /etc/sysconfig/cluster ] && . /etc/sysconfig/cluster

LOCK_FILE="/var/lock/subsys/fenced"

function check_sharedroot {
  root_fstype=$(mount | grep "/ " | awk 'BEGIN { exit_c=1; } { if ($5) { print $5; exit_c=0; } } END{ exit exit_c}')
  if [ "$root_fstype" = "gfs" ]; then
    return 1
  else
    return 0
  fi
}
function get_runlevel {
  return $(runlevel | cut -d" " -f2)
}

start()
{
  pids=$(fuser -mv ${INITRD_DIR} | grep fenced | awk '
BEGIN{ found=1; }
NF==5 && $5=="fenced" {print $3; found=0;} 
NF==4 && $4="fenced" {print $2; found=0;}
END { exit found; }
')
  if [ $? -eq 0 ]; then
    echo -n $"Stopping fenced from initrd"
    kill $pids 
    if [ $? -eq 0 ]; then
      success
      echo
      return 0
    else
      failure
      echo
      return 1
    fi
  elif [ -e ${INITRD_DIR}/var/lib/fence_tool/var/run/fenced.pid ]; then
    echo -n $"Stopping fenced from initrd"
    kill $(cat ${INITRD_DIR}/var/lib/fence_tool/var/run/fenced.pid) &&
    rm -f ${INITRD_DIR}/var/lib/fence_tool/var/run/fenced.pid
    if [ $? -eq 0 ]; then
      success
    else
      failure
    fi
  fi

  if [ -e /var/lib/fence_tool/var/run/fenced.pid ]; then
    stop
  fi
    
  echo -n "Starting fence domain (chroot):"

  # If gulm is in ccs, don't start fenced
  if ! [ -r /etc/cluster/cluster.conf ]
    then
      failure "/etc/cluster/cluster.conf not readable."
      echo
      return 1
  elif grep -qE "<[[:space:]]*gulm([[:space:]]|[>]|$)" \
     /etc/cluster/cluster.conf
    then
      warning "Skipping because of <gulm> section detected in " \
              "/etc/cluster/cluster.conf"
      echo
      exit 0
  fi

  rtrn=1

  if [ -e $FENCE_CHROOT/var/run/fenced.pid ]; then
    warning "Already running "$(cat $FENCE_CHROOT/var/run/fenced.pid)". Stop first"
    passed
    echo
    return 0
  fi
  [ ! -d $FENCE_CHROOT ] && mkdir -p /var/lib/fence_tool
  mount | grep "$FENCE_CHROOT" >/dev/null 2>/dev/null
  if [ $? -ne 0 ]; then
    mount -t tmpfs none $FENCE_CHROOT
    cp -a $FENCE_CHROOT_SOURCE/* $FENCE_CHROOT/
  fi &&
  [ -e $FENCE_CHROOT/var/run/fenced.pid ] && rm -r $FENCE_CHROOT/var/run/fenced.pid
  chroot $FENCE_CHROOT fence_tool join -w > /dev/null 2>&1
  rtrn=$?

  if [ $rtrn -eq 0 ]
    then
      #> # make sure that the fence domain is up and running
      #> until grep "^Fence Domain:" /proc/cluster/services | grep -q " run "
      #> do
      #>      sleep 1;
      #> done

      success "startup"
      echo
  else
      failure "startup"
      echo
  fi

  # need the extra echo to properlly terminate the line
  return $rtrn
}

stop()
{
  echo -n "Stopping fence domain (chroot):"

  if pidof fenced &> /dev/null
    then
    kill $(cat $FENCE_CHROOT/var/run/fenced.pid)

    rtrn=$?

    if [ $rtrn -eq 0 ]
      then
      success "shutdown"
      echo
    else
      failure "shutdown"
      echo
    fi
  else
    rtrn=0
    success "shutdown"
    echo
  fi

  rm -f $FENCE_CHROOT/var/run/fenced.pid &> /dev/null
  # need the extra echo to properlly terminate the line
  return $rtrn
}

rtrn=1

# See how we were called.
case "$1" in
  start)
    if [ check_sharedroot ]; then
        start
        rtrn=$?
        [ $rtrn = 0 ] && touch $LOCK_FILE
    fi
        ;;

  stop)
    if [ check_sharedroot ]; then
        stop
        rtrn=$?
        [ $rtrn = 0 ] && rm -f $LOCK_FILE
    fi
        ;;

  restart)
        $0 stop
        $0 start
        rtrn=$?
        ;;

  status)
        status fenced
        rtrn=1
        ;;

  *)
        echo $"Usage: $0 {start|stop|restart|status}"
        ;;
esac

exit $rtrn

#########################
# $Log: fenced-chroot,v $
# Revision 1.3  2006-02-16 13:58:33  marc
# minor changes
#
# Revision 1.2  2006/01/28 15:11:21  marc
# small changes
# added cvs tags
#
