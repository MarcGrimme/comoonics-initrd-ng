#! /bin/sh
#****h* comoonics-bootimage/bootsr
#  NAME
#    bootsr
#    $Id: bootsr,v 1.7 2010-02-05 12:47:30 marc Exp $
#  DESCRIPTION
#    Comoonics Shared Root post boot settings
#  AUTHOR
#    Mark Hlawatschek
#
#*******
#
# chkconfig: 345 11 99
# description: do the post settings for Comoonics Shared Root
# Author: hlawatschek@atix.de
#
#

#
# /etc/rc.d/init.d/bootsr
#

. /etc/init.d/functions

BOOTIMAGE_PATH=/opt/atix/comoonics-bootimage
CHROOT_PATH=$(${BOOTIMAGE_PATH}/manage_chroot.sh -p) 
UPDATE_CHROOT="${BOOTIMAGE_PATH}/manage_chroot.sh -a update"
UMOUNT_CHROOT="${BOOTIMAGE_PATH}/manage_chroot.sh -a umount"
MOUNT_CHROOT="${BOOTIMAGE_PATH}/manage_chroot.sh -a mount"
MOUNT_CDSL="${BOOTIMAGE_PATH}/manage_chroot.sh -a mount_cdsl"
CLEAN_START="${BOOTIMAGE_PATH}/manage_chroot.sh -a clean"
PATCH_FILES="${BOOTIMAGE_PATH}/manage_chroot.sh -a patch_files"
UNPATCH_FILES="${BOOTIMAGE_PATH}/manage_chroot.sh -a unpatch_files"
CREATE_XFILES="${BOOTIMAGE_PATH}/manage_chroot.sh -a createxfiles"
BUILD_FILE="/etc/comoonics-build.txt"

RETVAL=0

if [ -f /etc/sysconfig/comoonics-chroot ]; then
	source /etc/sysconfig/comoonics-chroot
fi

. ${BOOTIMAGE_PATH}/boot-scripts/etc/std-lib.sh
sourceLibs ${BOOTIMAGE_PATH}/boot-scripts
sourceRootfsLibs ${BOOTIMAGE_PATH}/boot-scripts


#****f* bootsr/check_mtab
#  NAME
#    check_mtab
#  SYNOPSIS
#    function check_mtab rootfstype
#  IDEAS
#    Checks if the mtab is a file (not a link) and if so checks if all filesystems mounted within the initrd are also in the mtab
function check_mtab {
	local rootfs_type=$1
	
	if [ -f /etc/mtab ]; then
		cat /proc/mounts | cut -d" " -f2 | grep /cdsl.local >/dev/null &>/dev/null
		if [ $? -eq 0 ]; then
			cat /etc/mtab | cut -d" " -f2 | grep /cdsl.local >/dev/null &>/dev/null
			if [ $? -ne 0 ]; then
				$MOUNT_CDSL
			fi
		fi
	fi
} 

#****f* bootsr/clean_start
#  NAME
#    clean_start
#  SYNOPSIS
#    function clean_start
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function clean_start {
	$CLEAN_START
}
#************ clean_start

#****f* bootsr/check_sharedroot
#  NAME
#    check_sharedroot
#  SYNOPSIS
#    function check_sharedroot
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function check_sharedroot {
  local root_fstype=$1
  if [ "$root_fstype" = "gfs" ] || [ "$root_fstype" = "ocfs2" ] || [ "$root_fstype" = "nfs" ] || [ "$root_fstype" = "glusterfs" ]; then
    return 1
  else
    return 0
  fi
}
#************ check_sharedroot
#****f* bootsr/get_runlevel
#  NAME
#    get_runlevel
#  SYNOPSIS
#    function get_runlevel
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function get_runlevel {
  return $(runlevel | cut -d" " -f2)
}
#************ get_runlevel

#************ umount_chroot
#****f* bootsr/umount_chroot
#  NAME
#    umount_chroot
#  SYNOPSIS
#    function umount_chroot
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
function umount_chroot {
  return $(runlevel | cut -d" " -f2)
}
#************ get_runlevel

#****f* bootsr/main
#  NAME
#    main
#  SYNOPSIS
#    function main
#  MODIFICATION HISTORY
#  IDEAS
#  SOURCE
#
logfile=/var/log/bootsr.log

#to be backward compatible
exec 3>> $logfile
exec 4>> $logfile
exec 5>> $logfile
exec 6>> $logfile
exec 7>> $logfile

rootfs=$(repository_get_value rootfs)
clutype=$(repository_get_value clutype)

# See how we were called.
case "$1" in
  start)
  	# will do
  	# - update chroot environment for additional services (fence_ack_server)
    
  	# first clean old repos
    check_mtab $rootfs
    
    check_sharedroot $rootfs
    sharedroot=$?
    if  [ -n "$rootfs" ] && [ $sharedroot ]; then
      touch /var/lock/subsys/bootsr
      if [ -z "$chrootneeded" ]; then
        clusterfs_chroot_needed init
        __default=$?
        chrootneeded=$(getParameter chroot $__default)
      fi
	  if [ $chrootneeded -eq 0 ]; then
 	  	action "Mounting filesystems to chroot" $MOUNT_CHROOT
	  	action "Updating chroot environment" $UPDATE_CHROOT
  	  fi 
 	  
   	  typeset -f cc_init >/dev/null && action "Starting ${clutype} dependent services" cc_init start "$CHROOT_PATH" "$rootfs"
 	  if [ "${clutype}" != "${rootfs}" ]; then
 	   	typeset -f clusterfs_init >/dev/null && action "Starting ${rootfs} dependent services" clusterfs_init start "$CHROOT_PATH" "$rootfs"
 	  fi
    fi
    ;;
  stop)
 	  typeset -f cc_init >/dev/null && action "Stopping ${clutype} dependent services" cc_init stop "$CHROOT_PATH" "$rootfs"
 	  if [ "${clutype}" != "${rootfs}" ]; then
   	    typeset -f clusterfs_init >/dev/null && action "Stopping ${rootfs} dependent services" clusterfs_init stop "$CHROOT_PATH" "$rootfs"
 	  fi 
  	  [ -e /var/lock/subsys/bootsr ] && rm -f /var/lock/subsys/bootsr 
	  typeset -f ${rootfs}_needed >/dev/null && ${rootfs}_chroot_needed init
	  if [ $? -eq 0 ]; then
	    action "Cleaning up chroot environment" $UMOUNT_CHROOT
	  fi
  	  $PATCH_FILES
  	  $CREATE_XFILES
        ;;
  status)
      exit 0
      ;;
  reload)
      if [ check_sharedroot ]; then
  	    typeset -f ${rootfs}_needed >/dev/null && ${rootfs}_chroot_needed init
	    if [ $? -eq 0 ]; then
	      action "Updating chroot environment" $UPDATE_CHROOT
	    fi
	  fi
	  ;;
  restart)
  	 $0 stop
  	 $0 start 
      ;;
  patch_files)
      $PATCH_FILES
      ;;
  unpatch_files)
      $UNPATCH_FILES
      ;;
  *)
        echo "Usage: bootsr {start|stop|status|restart|reload}"
        exit 1
esac
exit $RETVAL
#************ main
###############
# $Log: bootsr,v $
# Revision 1.7  2010-02-05 12:47:30  marc
# - clean up
# - moved functionality to libs
# - RHEL4 support
#
# Revision 1.6  2009/02/25 14:24:59  marc
# backport of new features to rhel4
#
# Revision 1.5  2008/10/29 14:45:33  mark
# fix for bug #251 from EL4_4
#
# Revision 1.3.2.1  2008/09/09 15:15:08  mark
# fix for bug #251
#
# Revision 1.3  2007/11/22 16:31:04  mark
# added automatic mount for gfs filesystems, fixes bz #150
#
# Revision 1.2  2007/10/11 08:46:43  mark
# fix reload option #106
#
# Revision 1.1  2007/09/12 14:45:41  mark
# extra initrd directory
# initscripts are distro dependent

